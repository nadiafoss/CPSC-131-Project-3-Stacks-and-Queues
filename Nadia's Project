#include <iostream>
#include <vector>
#include <stack>
#include <queue>
#include <algorithm>

class Stack {
public:
    void validPara(std::string expr) {
        std::stack<char> s;
        for (char c : expr) {
            if (c == '(' || c == '[' || c == '{') {
                s.push(c);
            } else if (c == ')' || c == ']' || c == '}') {
                if (s.empty() || !isMatching(s.top(), c)) {
                    std::cout << "invalid" << std::endl;
                    return;
                }
                s.pop();
            }
        }
        std::cout << (s.empty() ? "valid" : "invalid") << std::endl;
    }

    int indexError(std::string expr) {
        std::stack<char> s;
        for (int i = 0; i < expr.size(); ++i) {
            if (expr[i] == '(' || expr[i] == '[' || expr[i] == '{') {
                s.push(expr[i]);
            } else if (expr[i] == ')' || expr[i] == ']' || expr[i] == '}') {
                if (s.empty() || !isMatching(s.top(), expr[i])) {
                    return i;
                }
                s.pop();
            }
        }
        return -1;
    }

    void minPara(std::string expr) {
        std::stack<char> s;
        int count = 0;
        for (char c : expr) {
            if (c == '(' || c == '[' || c == '{') {
                s.push(c);
            } else if (c == ')' || c == ']' || c == '}') {
                if (s.empty() || !isMatching(s.top(), c)) {
                    ++count;
                } else {
                    s.pop();
                }
            }
        }
        std::cout << count << std::endl;
    }

    void scorePara(std::string expr) {
        std::stack<char> s;
        int count = 0;
        for (char c : expr) {
            if (c == '(' || c == '[' || c == '{') {
                s.push(c);
            } else if (c == ')' || c == ']' || c == '}') {
                if (s.empty() || !isMatching(s.top(), c)) {
                    continue;
                }
                s.pop();
                ++count;
            }
        }
        std::cout << count << std::endl;
    }

private:
    bool isMatching(char opening, char closing) {
        return (opening == '(' && closing == ')') ||
               (opening == '[' && closing == ']') ||
               (opening == '{' && closing == '}');
    }
};

class Queue {
public:
    void enqueue(std::string message) {
        for (int i = 0; i < message.size(); i += 8) {
            std::string chunk = message.substr(i, 8);
            std::reverse(chunk.begin(), chunk.end());
            q.push(chunk);
        }
    }

    void processMsg() {
        while (!q.empty()) {
            std::string chunk = q.front();
            std::reverse(chunk.begin(), chunk.end());
            std::cout << chunk;
            q.pop();
        }
        std::cout << std::endl;
    }

private:
    std::queue<std::string> q;
};

int main() {
    Stack s;
    s.validPara("(([]))");
    s.minPara("(([]))");
    s.scorePara("(([]))");
    s.validPara("(([])");
    std::cout << s.indexError("(([))") << std::endl;
    s.minPara("(([])");
    s.validPara("(([{}))");
    std::cout << s.indexError("(([[}])") << std::endl;
    s.minPara("(([{}))");
    s.scorePara("(([{}))");
    std::cout << s.indexError("({}[]()[)") << std::endl;
    s.validPara("(([))");
    s.minPara("(([))");
    std::cout << s.indexError("[({)]") << std::endl;
    s.validPara("(([{[{({})}]}]))");
    s.minPara("(([{[{({})}]}]))");
    s.scorePara("(([{[{({})}]}]))");
    s.validPara("(([[{[{({})}]))");
    s.validPara("(([[{[{({})}]}])]))");
    s.scorePara("(([[{[{({})}]}])]))");
    std::cout << s.indexError("(([[{{({})]}])]))") << std::endl;
    s.validPara("(())");
    s.validPara("(())");
    s.validPara("void function(){}");
    s.scorePara("void function(){}");
    s.validPara("void function(");
    s.minPara("void function(");
    s.validPara("void function(std::string expre){if(expre){return 1;}else{return 0;}}");
    s.scorePara("void function(std::string expre){if(expre){return 1;}else{return 0;}}");
    s.validPara("void function(std::string expre){if(expre){return 1;else{return 0;}");
    s.validPara("void function(std::string expre){if(expre){return 1;else{return 0;");
    s.minPara("void function(std::string expre){if(expre){return 1;else{return 0;");
    std::cout << s.indexError("void function(std::string expre){if(expre){return 1;else{return 0;") << std::endl;

    Queue q;
    q.enqueue("This is a secure message.");
    q.processMsg();
    q.enqueue("The product I received is damaged. What should I do?");
    q.processMsg();
    q.enqueue("I need assistance with setting up my new device");
    q.processMsg();
    q.enqueue("The website is not loading properly on my browser.");
    q.processMsg();
    q.enqueue("I accidentally placed the wrong order. Can it be canceled?");
    q.processMsg();
    q.enqueue("This is your project3. Have a happy thanksgiving!!! Hahaha");
    q.processMsg();
    q.enqueue("I forgot my password and can't reset it. Help, please! Do you provide technical support for mobile devices?");
    q.processMsg();
    q.enqueue("The software update is causing issues on my computer. The response time on your website is very slow.");
    q.processMsg();

    return 0;
}
